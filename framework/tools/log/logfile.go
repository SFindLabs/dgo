package log

import (
	"fmt"
	"io"
	"math/rand"
	"os"
	"runtime"
	"strings"
	"sync"
	"time"
)

// These flags define which text to prefix to each log entry generated by the LlogFile.
// Bits are or'ed together to control what's printed.
// There is no control over the order they appear (the order listed
// here) or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
//	2009/01/23 01:23:23 message
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
const (
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard LlogFile
)
const (
	LOG_LEVEL_ERROR = 9 //错误
	LOG_LEVEL_WARN  = 8 //警告
	LOG_LEVEL_INFO  = 7 //普通
	LOG_LEVEL_DEBUG = 6 //调试
)

type EntryWrite struct {
}

func (EntryWrite) Write(p []byte) (n int, err error) {
	return 0, nil
}

// A LlogFile represents an active logging object that generates lines of
// output to an io.Writer. Each logging operation makes a single call to
// the Writer's Write method. A LlogFile can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type LlogFile struct {
	mu     sync.Mutex // ensures atomic writes; protects the following fields
	prefix string     // prefix to write at beginning of each line
	flag   int        // properties
	out    io.Writer  // destination for output
	buf    []byte     // for accumulating text to write

	objLevel       int      //此实例错误等级
	sysLevel       int      //系统错误等级
	logFile        string   //文件名称
	logFilePoint   *os.File //文件句柄
	logFileMaxSize int64    //单位Mb
	split          bool     //是否每日分割日志
}

// New creates a new LlogFile. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func NewLlogFile(logFileP string, prefixP string, flagP int, objLevelP, sysLevelP int, logFileMaxSizeP int64, isSplit ...bool) (*LlogFile, error) {
	ts := &LlogFile{
		objLevel:       objLevelP,
		sysLevel:       sysLevelP,
		logFile:        logFileP,
		prefix:         prefixP,
		flag:           flagP,
		logFilePoint:   nil,
		logFileMaxSize: logFileMaxSizeP * 1024 * 1024,
	}
	if len(isSplit) > 0 {
		ts.split = isSplit[0]
	}
	if ts.objLevel < ts.sysLevel {
		ts.out = EntryWrite{} //空输出
	} else {
		if ts.logFile == "" {
			ts.logFilePoint = os.Stdout //输出到标准输出
			ts.out = os.Stdout          //
		} else {
			logf, err := os.OpenFile(ts.logFile, os.O_WRONLY|os.O_CREATE|os.O_APPEND, os.ModeAppend)
			if err != nil {
				fmt.Println("open file error:", err)
				return nil, err
			}
			ts.logFilePoint = logf
			ts.out = logf
		}
	}
	return ts, nil
}

// formatHeader writes log header to buf in following order:
//   * l.prefix (if it's not blank),
//   * date and/or time (if corresponding flags are provided),
//   * file and line number (if corresponding flags are provided).
func (l *LlogFile) formatHeader(buf *[]byte, t time.Time, file string, line int) {
	*buf = append(*buf, l.prefix...)
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&LUTC != 0 {
			t = t.UTC()
		}
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// LlogFile. A newline is appended if the last character of s is not
// already a newline. Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (ts *LlogFile) Output(calldepth int, s string) error {
	now := time.Now() // get this early.
	var file string
	var line int
	ts.mu.Lock()
	defer ts.mu.Unlock()
	if ts.flag&(Lshortfile|Llongfile) != 0 {
		// Release lock while getting caller info - it's expensive.
		ts.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		ts.mu.Lock()
	}
	ts.buf = ts.buf[:0]
	ts.formatHeader(&ts.buf, now, file, line)
	ts.buf = append(ts.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {
		ts.buf = append(ts.buf, '\n')
	}
	_, err := ts.out.Write(ts.buf)
	if err != nil {
		return err
	}
	if ts.logFilePoint != nil {
		err := ts.logFilePoint.Sync()
		if err != nil {
			return err
		}
	}
	return nil
}

func (ts *LlogFile) CheckFile() {
	if rand.Intn(200) != 0 {
		return
	}

	ts.mu.Lock()
	defer ts.mu.Unlock()

	if ts.logFilePoint == nil || ts.logFilePoint == os.Stdout {
		return
	}

	fileInfo, err := ts.logFilePoint.Stat()
	if err != nil {
		fmt.Println("logFilePoint.Stat fail:", err)
	}

	//大小判断
	if fileInfo.Size() > ts.logFileMaxSize {
		//先关闭
		ts.logFilePoint.Close()
		ts.logFilePoint = nil

		//移动文件
		newPath := ts.logFile + "." + randomString() + "." + time.Now().Format("20060102150405")
		if err := os.Rename(ts.logFile, newPath); err != nil {
			fmt.Println("Rename fail:", err)
		}

		//重新打开
		logf, err := os.OpenFile(ts.logFile, os.O_WRONLY|os.O_CREATE|os.O_APPEND, os.ModeAppend)
		if err != nil {
			fmt.Println("open file error:", err)
		}
		ts.logFilePoint = logf
		ts.out = logf
	}
}

//分割日志
func (ts *LlogFile) CutFile() {
	if !ts.split {
		if rand.Intn(200) != 0 {
			return
		}
	}

	ts.mu.Lock()
	defer ts.mu.Unlock()

	if ts.logFilePoint == nil || ts.logFilePoint == os.Stdout {
		return
	}

	fileInfo, err := ts.logFilePoint.Stat()
	if err != nil {
		fmt.Println("logFilePoint.Stat fail:", err)
		return
	}

	if ts.split {
		modTimeStr := fileInfo.ModTime().Format("20060102")
		today := time.Now().Format("20060102")

		if modTimeStr != today {
			//先关闭
			ts.logFilePoint.Close()
			ts.logFilePoint = nil

			sep := "/"
			pathStr := strings.Split(ts.logFile, sep)
			name := pathStr[len(pathStr)-1]
			newPath := pathStr[:len(pathStr)-1]
			nameStr := strings.Split(name, ".")

			monthDir := fmt.Sprintf("%s/%s/%s/%s", strings.Join(newPath, sep), nameStr[0], fileInfo.ModTime().Format("2006"), fileInfo.ModTime().Format("01"))
			_, err := os.Stat(monthDir)
			if os.IsNotExist(err) {
				if err := os.MkdirAll(monthDir, 755); err != nil {
					fmt.Println("mkdir all record month dir error:", err)
					return
				}
			}

			//移动文件
			mvPath := fmt.Sprintf("%s/%s.%s", monthDir, fileInfo.ModTime().Format("02"), nameStr[1])
			if err := os.Rename(ts.logFile, mvPath); err != nil {
				fmt.Println("Rename fail:", err)
			}
		}
	} else {
		if fileInfo.Size() > ts.logFileMaxSize {
			//先关闭
			ts.logFilePoint.Close()
			ts.logFilePoint = nil

			//移动文件
			newPath := ts.logFile + "." + randomString() + "." + time.Now().Format("20060102150405")
			if err := os.Rename(ts.logFile, newPath); err != nil {
				fmt.Println("Rename fail:", err)
			}
		}
	}
	//重新打开
	logf, err := os.OpenFile(ts.logFile, os.O_WRONLY|os.O_CREATE|os.O_APPEND, os.ModeAppend)
	if err != nil {
		fmt.Println("open file error:", err)
	}
	ts.logFilePoint = logf
	ts.out = logf
}

func (l *LlogFile) Printf(format string, v ...interface{}) {
	l.CutFile()
	l.Output(2, fmt.Sprintf(format, v...))
}

func (l *LlogFile) Print(v ...interface{}) {
	l.CutFile()
	l.Output(2, fmt.Sprint(v...))
}

func (l *LlogFile) Println(v ...interface{}) {
	l.CutFile()
	l.Output(2, fmt.Sprintln(v...))
}
func (l *LlogFile) Write(p []byte) (int, error) {
	l.CutFile()
	err := l.Output(2, string(p))
	//l.CheckFile()
	return len(p), err
}

//---------------------------------------------------------
// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

func randomString() string {
	var str = "abcdefghijklmnopqrstuvwxyz"

	bytes := []byte(str)
	result := []byte{}
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	for i := 0; i < 5; i++ {
		result = append(result, bytes[r.Intn(len(bytes))])
	}
	return string(result)
}

//---------------------------------------------------------
var Error *LlogFile
var Warn *LlogFile
var Info *LlogFile
var Debug *LlogFile

func init() {
	Error, _ = NewLlogFile("", "[Error]", LstdFlags|Lshortfile, LOG_LEVEL_ERROR, LOG_LEVEL_ERROR, 50)
	Warn, _ = NewLlogFile("", "[Warn]", LstdFlags|Lshortfile, LOG_LEVEL_WARN, LOG_LEVEL_WARN, 50)
	Info, _ = NewLlogFile("", "[Info]", LstdFlags|Lshortfile, LOG_LEVEL_INFO, LOG_LEVEL_INFO, 50)
	Debug, _ = NewLlogFile("", "[Debug]", LstdFlags|Lshortfile, LOG_LEVEL_DEBUG, LOG_LEVEL_DEBUG, 50)
}
